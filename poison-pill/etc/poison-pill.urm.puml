@startuml
package com.iluwatar.poison.pill {
  interface MqPublishPoint {
    + put(Message) {abstract}
  }
  interface Message {
    + POISON_PILL : Message {static}
    + addHeader(Headers, String) {abstract}
    + getBody() : String {abstract}
    + getHeader(Headers) : String {abstract}
    + getHeaders() : Map<Headers, String> {abstract}
    + setBody(String) {abstract}
  }
  class App {
    + App()
    + main(args : String[]) {static}
  }
  interface MessageQueue {
  }
  class Producer {
    - isStopped : boolean
    - name : String
    - queue : MqPublishPoint
    + Producer(name : String, queue : MqPublishPoint)
    + send(body : String)
    + stop()
  }
  class Consumer {
    - name : String
    - queue : MqSubscribePoint
    + Consumer(name : String, queue : MqSubscribePoint)
    + consume()
  }
  class SimpleMessageQueue {
    - queue : BlockingQueue<Message>
    + SimpleMessageQueue(bound : int)
    + put(msg : Message)
    + take() : Message
  }
  interface MqSubscribePoint {
    + take() : Message {abstract}
  }
  class SimpleMessage {
    - body : String
    - headers : Map<Headers, String>
    + SimpleMessage()
    + addHeader(header : Headers, value : String)
    + getBody() : String
    + getHeader(header : Headers) : String
    + getHeaders() : Map<Headers, String>
    + setBody(body : String)
  }
  enum Headers {
    + DATE {static}
    + SENDER {static}
    + valueOf(name : String) : Headers {static}
    + values() : Headers[] {static}
  }
}
SimpleMessageQueue -->  "-queue" Message
Headers ..+ Message
Consumer -->  "-queue" MqSubscribePoint
Producer -->  "-queue" MqPublishPoint
SimpleMessage --+ Message
Producer --+ Message
Message -->  "-POISON_PILL" Message
Consumer --+ Message
MessageQueue --|> MqPublishPoint 
MessageQueue --|> MqSubscribePoint 
SimpleMessageQueue ..|> MessageQueue 
SimpleMessage ..|> Message 
@enduml